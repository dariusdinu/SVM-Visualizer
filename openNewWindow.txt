    def openWindow(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_SecondWindow()
        self.ui.setupUi(self.window)
        self.window.show()

from SecondWindow import Ui_SecondWindow

    def plotOnCanvas(self):
        # clear the canvas
        self.figure.clear()
        iris = datasets.load_iris()
        target_names = iris.target_names[1:]
        X = iris.data
        y = iris.target
        X = X[y != 0, :2]
        y = y[y != 0]
        n_sample = len(X)

        np.random.seed(0)
        order = np.random.permutation(n_sample)
        X = X[order]
        y = y[order].astype(np.float)
        X_train = X[:int(.9 * n_sample)]
        y_train = y[:int(.9 * n_sample)]
        X_test = X[int(.9 * n_sample):]
        y_test = y[int(.9 * n_sample):]

        # fit the model
        clf = svm.SVC(kernel='poly', gamma=3, degree=2)
        clf.fit(X_train, y_train)
        plt.clf()
        plt.scatter(X[:, 0], X[:, 1], c=y, zorder=2, cmap=ListedColormap(["#003345", "#1b8697"]), edgecolor='k')

        # Circle out the test data
        # plt.scatter(X_test[:, 0], X_test[:, 1], s=80, facecolors='none', zorder=10, edgecolor='k') #s -> radius of the countour circle

        plt.axis('tight')

        x_min = X[:, 0].min()
        x_max = X[:, 0].max()
        y_min = X[:, 1].min()
        y_max = X[:, 1].max()

        XX, YY = np.mgrid[x_min:x_max:200j, y_min:y_max:200j]
        Z = clf.decision_function(np.c_[XX.ravel(), YY.ravel()])

        # Put the result into a color plot
        Z = Z.reshape(XX.shape)
        plt.pcolormesh(XX, YY, Z > 0, cmap=ListedColormap(["#b2c1c7", "#a3ced5"]), shading='auto')
        plt.contour(XX, YY, Z, colors=['k', 'k', 'k'],
                    linestyles=['--', '-', '--'], levels=[-.5, 0, .5])
        plt.title('Data from the Iris Set')
        plt.xlabel('Sepal width')
        plt.ylabel('Sepal length')
        plt.legend(target_names)
        # refresh
        self.canvas.draw()

    def fileImport(self):
        dialog = QFileDialog()  # open a file dialog
        dialog.setNameFilter("*.csv")  # allow only files with the .csv extension
        dialog.exec_()
        file = dialog.selectedFiles()  # get the path of the chosen file
        data = pd.read_csv(file[0])  # get the data from the chosen file
        basename = os.path.basename(file[0])  # get the file basename as a tuple
        file_name = os.path.splitext(basename)[0]  # the name of the file
        file_extension = os.path.splitext(basename)[1]  # the extension of the file
        self.numeFisierLabel.setText(
            str(file_name + file_extension))  # set the text label as the name of the chosen file
        self.numeFisierLabel.setStyleSheet("font-size:40px;\nmargin:10px;\nfont-weight:bold;\nbackground-color:rgb(27, 134, 151);\ncolor:rgb(244, 244, 244)\n")
        print(data)

    with open('SecondWindow.qss', 'r') as f:
            style = f.read()
            SecondWindow.setStyleSheet(style)

    plt.rcParams.update({'font.family': 'Century Gothic'})  # setting the font for all elements of the plot


from PyQt5 import QtCore, QtGui, QtWidgets
from PySide2.QtWidgets import *
from PySide2.QtGui import *
from PySide2.QtWidgets import *
import sys
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.colors import ListedColormap
from matplotlib.figure import Figure
import numpy as np
import pandas as pd
from sklearn import datasets, svm
import os

        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.plotFrame)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        ##Canvas here
        self.figure = plt.figure()
        self.canvas = FigureCanvas(self.figure)
        ##end of Canvas
        self.horizontalLayout_5.addWidget(self.canvas)
        ##end of horizontal layout

from PyQt5 import QtCore, QtGui, QtWidgets
from PySide2.QtWidgets import *

        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../Facultate/Licenta/dot-crossed_icon-icons.com_68558.ico"), QtGui.QIcon.Normal,
                       QtGui.QIcon.Off)
        CheckResultsWindow.setWindowIcon(icon)

        with open('CheckResultsWindow.qss', 'r') as f:
            style = f.read()
            CheckResultsWindow.setStyleSheet(style)

        self.w = None
        self.b = None
        self.indices = None
        self.vectors = None
        self.noSV = None
        self.coef = None

    def saveToTextFile(self):
        f = open('Results.txt','w+')
        f.write('Weights assigned to the features:\n')
        f.write(self.w)
        f.write('\nConstants in the decision function:\n')
        f.write(self.b)
        f.write('\nIndices of support vectors:\n')
        f.write(self.indices)
        f.write('\nSupport vectors:\n')
        f.write(self.vectors)
        f.write('\nNumber of support vectors for each class:\n')
        f.write(self.noSV)
        f.write('\nDual coefficients of the support vector in the decision function:\n')
        f.write(self.coef)
        f.close()
        self.textFileCreated()

    def textFileCreated(self):
        msg = QMessageBox()
        msg.setWindowTitle("Info")
        msg.setText("Data saved to the Results.txt file")
        msg.setIcon(QMessageBox.Information)
        msg.setStandardButtons(QMessageBox.Ok)
        x = msg.exec_()

    def loadText(self):
        self.wTextLabel.setText(str(self.w))
        self.bTextLabel.setText(str(self.b))
        self.vectorsTextLabel.setText(str(self.vectors))
        self.indicesTextLabel.setText(str(self.indices))
        self.coefTextLabel.setText(str(self.coef))
        self.noSVTextLabel.setText(str(self.noSV))